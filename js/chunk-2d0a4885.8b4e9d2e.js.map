{"version":3,"sources":["webpack:///./node_modules/@capacitor/filesystem/dist/esm/web.js"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","async","options","_a","_b","requestInit","webFetchExtra","response","fetch","url","blob","progress","body","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","read","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","Blob","buffer","type","undefined","result","writeFile","directory","recursive","data","uri","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","onerror","error","onblocked","console","warn","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","objectStore","req","indexName","uriPath","cleanedUriPath","replace","fsPath","clear","getPath","entry","dbRequest","Error","content","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","btoa","atob","entries","dbIndexRequest","IDBKeyRange","only","depth","match","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","deleteFile","rmdir","all","map","e","subEntry","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","readFile","UTF8","writeResult","contents","filename","str","err","_debug"],"mappings":"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","file":"js/chunk-2d0a4885.8b4e9d2e.js","sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            var _a, _b;\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!options.progress)\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const result = await this.writeFile({\n                path: options.path,\n                directory: (_a = options.directory) !== null && _a !== void 0 ? _a : undefined,\n                recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,\n                data: blob,\n            });\n            return { path: result.uri, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding && !(data instanceof Blob)) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data instanceof Blob ? data.size : data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content instanceof Blob) {\n                throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n            }\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"sourceRoot":""}